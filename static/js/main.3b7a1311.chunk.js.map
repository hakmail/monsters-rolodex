{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.cpmponents.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","string","fetch","then","response","json","users","this","filterdMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAIaA,G,YAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,aCFbC,G,MAAW,SAAAR,GAAK,OAEzB,aADA,CACA,OAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCNlBM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBACIZ,UAAY,SACZa,KAAK,SACLF,YAAaA,EACbG,SAAYF,MC4ELG,E,kDA7Eb,aAAc,IAAD,8BACX,gBA6BFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SA5BpC,EAAKC,MAAQ,CACXC,OAAQ,cACRd,SAAS,CACP,CACEH,KAAM,eACND,GAAI,MAEN,CACEC,KAAM,UACND,GAAI,MAEN,CACEC,KAAM,SACND,GAAI,OAGRc,YAAa,IAnBJ,E,gEAwBO,IAAD,OACjBK,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAACT,SAASmB,S,+BAMhC,IAAD,EAC0BC,KAAKP,MAA9Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACXW,EAAkBrB,EAASsB,QAAQ,SAAA3B,GAAO,OAC9CA,EAAQE,KAAK0B,cAAcC,SAASd,EAAYa,kBAElD,OACE,sBAAK/B,UAAU,MAAf,UACA,oDACA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAgBgB,KAAKhB,eAEvB,cAAC,EAAD,CAAUJ,SAAYqB,W,GA9CVI,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3b7a1311.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) =>(\r\n    <div className=\"card-container\">\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n)","import React from 'react';\r\n\r\nimport { Card } from '../card/card.component';\r\n\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = props => (\r\n    //return <div className=\"card-list\">{props.children}</div>;\r\n    <div className=\"card-list\">\r\n        {props.monsters.map(monster => (\r\n            <Card key={monster.id} monster={monster} />\r\n        ))}\r\n    </div>\r\n)","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input \r\n        className = 'search'\r\n        type=\"search\" \r\n        placeholder={placeholder}\r\n        onChange = {handleChange} />\r\n);","import {Component} from 'react';\n//import logo from './logo.svg';\nimport './App.css';\n\nimport {CardList} from './components/card-list/card-list.cpmponents';\nimport {SearchBox} from './components/search-box/search-box.component';\n\nclass App extends Component{\n  constructor(){\n    super();\n\n    this.state = {\n      string: \"Hello Hamed\",\n      monsters:[\n        {\n          name: 'Frankenstein',\n          id: 'n1'\n        },\n        {\n          name: 'Dracula',\n          id: 'n2'\n        },\n        {\n          name: 'Zombie',\n          id: 'n3'\n        }\n      ],\n      searchField: ''\n    }\n    //this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters:users}))\n  }\n\n  handleChange = e => {\n    this.setState({searchField:e.target.value})\n  }\n  render(){\n    const {monsters, searchField} = this.state;\n    const filterdMonsters = monsters.filter( monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n      <h1> Monsters Rolodex </h1>\n      <SearchBox\n        placeholder=\"Search Monsters\" \n        handleChange = {this.handleChange}\n      />\n      <CardList monsters = {filterdMonsters}>\n        {/*\n          this.state.monsters.map(monster => \n            (<h1 key={monster.id}>{monster.name}</h1>)\n          )\n        */}\n        </CardList>\n        {/*<header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            {this.state.string}\n          </p>\n          <button onClick={() => this.setState({string: \"Hello Hamed Ali Khan\"})}>Change Text</button>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n        \n          this.state.monsters.map(monster => \n            (<h1 key={monster.id}>{monster.name}</h1>)\n          )\n          */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}